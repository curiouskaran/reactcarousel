{"version":3,"sources":["SlideShow.js","App.js","serviceWorker.js","index.js"],"names":["SlideShow","props","_useState","useState","_useState2","Object","slicedToArray","current","setCurrent","total","Children","count","children","showNext","prevValue","useEffect","interval","setInterval","clearInterval","bullet","react_default","a","createElement","className","bullets","Array","fill","toArray","App","src_SlideShow","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KA+BeA,EA7BG,SAACC,GAAU,IAAAC,EACGC,mBAAS,GADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpBK,EADoBH,EAAA,GACXI,EADWJ,EAAA,GAErBK,EAAQC,WAASC,MAAMV,EAAMW,UAE7BC,EAAW,WACfL,EAAW,SAACM,GACV,OAAOA,EAAY,IAAML,EAAS,EAAIK,EAAY,KAItDC,oBAAU,WACR,IAAMC,EAAWC,YAAYJ,EAAU,KACvC,OAAO,kBAAMK,cAAcF,KAC3B,IAEF,IAAMG,EAASC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACxBC,EAAUC,MAAMhB,GAAOiB,KAAKP,GAClCK,EAAQjB,GAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAjBP,IAmBpBX,EAAYX,EAAZW,SAEP,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GACzBd,WAASiB,QAAQf,GAAUL,KCPnBqB,EAdH,WACR,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,KACET,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,iCAAiCC,IAAI,WAC9CX,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,iCAAiCC,IAAI,WAC9CX,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,iCAAiCC,IAAI,WAC9CX,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,iCAAiCC,IAAI,WAC9CX,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,iCAAiCC,IAAI,cCDpCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.304fbb7a.chunk.js","sourcesContent":["import React , { Children, useState, useEffect} from 'react';\n\nconst SlideShow = (props) => {\n  const [current, setCurrent] = useState(0);\n  const total = Children.count(props.children);\n\n  const showNext = () => {\n    setCurrent((prevValue) => {\n      return prevValue + 1 === total ?  0 : prevValue + 1\n    });\n  }\n  \n  useEffect(() => {\n    const interval = setInterval(showNext, 3000);\n    return () => clearInterval(interval);\n  },[])\n\n  const bullet = <div className=\"bullet-empty\"></div>;\n  const bullets = Array(total).fill(bullet);\n  bullets[current] = <div className=\"bullet-filled\"></div>;\n  \n  const {children} = props;\n  \n  return(\n    <div className=\"slideshow\">\n      <div className=\"bullets\">{bullets}</div>\n      {Children.toArray(children)[current]}\n    </div>\n  );\n}\n\nexport default SlideShow;","import React from 'react';\n\nimport './App.css';\nimport SlideShow from './SlideShow';\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        <SlideShow>\n          <img src=\"http://placekitten.com/300/200\" alt=\"catimg\"/>\n          <img src=\"http://placekitten.com/300/201\" alt=\"catimg\"/>\n          <img src=\"http://placekitten.com/300/202\" alt=\"catimg\"/>\n          <img src=\"http://placekitten.com/300/199\" alt=\"catimg\"/>\n          <img src=\"http://placekitten.com/300/203\" alt=\"catimg\"/>\n        </SlideShow>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}